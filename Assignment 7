A1. The three important components of a function are:

Input parameters: The values or variables that are passed as input to the function.
Function body: The code that defines the operation to be performed on the input parameters.
Return value: The output value or values that the function returns after performing the operation on the input parameters.

A2. The four principles that govern how R looks for values are:

Name masking: Objects in the current environment mask objects in parent environments with the same name.
Lexical scoping: Functions are evaluated in the environment where they were defined, not where they are called.
Dynamic scoping: Functions are evaluated in the environment where they are called, not where they were defined.
Search path: R searches for objects in a specific order, starting with the current environment and moving up the parent environments until it reaches the global environment.

A3. One possible pair of functions that give the same output as f1(1) and f1(2) are:

f2 <- function(x) {
  if (x == 1) {
    return(2)
  } else if (x == 2) {
    return(3)
  }
}

f3 <- function(x) {
  result <- 0
  if (x == 1) {
    result <- 2
  } else if (x == 2) {
    result <- 3
  }
  return(result)
}

Both f2 and f3 will return 2 when called with input 1 and return 3 when called with input 2, just like f1. However, they may have different behavior for other inputs.

A4. The function f2 returns 100. This is because when the function is called without an argument (i.e., `f2()`), the default value of the argument `x` is set to the value of `z`, which is then set to 100 within the function. Therefore, when `x` is returned, it is equal to the value of `z`, which is 100.

This function illustrates the principle of default argument values in R. When a function is defined with default values for its arguments, those values are used if the function is called without explicitly specifying the value for that argument. In this case, the default value for `x` is set to `z`, which is initially undefined within the function, so it will be set to the default value of 100.

A5. 
1. vector_stats <- function(x, stat) {
  # Check that stat is a valid statistic
  valid_stats <- c("length", "mean", "median", "sum")
  if (!stat %in% valid_stats) {
    return("Sorry, this function doesn't exist.")
  }
  
  # Check that x is a vector
  if (!is.vector(x)) {
    return("Invalid")
  }
  
  # Calculate the desired statistic
  if (stat == "length") {
    result <- length(x)
  } else if (stat == "mean") {
    if (!is.numeric(x)) {
      return("Invalid")
    }
    result <- mean(x)
  } else if (stat == "median") {
    if (!is.numeric(x)) {
      return("Invalid")
    }
    result <- median(x)
  } else if (stat == "sum") {
    if (!is.numeric(x)) {
      return("Invalid")
    }
    result <- sum(x)
  }
  
  # Return the result
  return(result)
}

# Calculate the length of a vector
vector_stats(1:5, "length")
# Output: 5

# Calculate the mean of a numeric vector
vector_stats(c(1, 2, 3), "mean")
# Output: 2

# Try to calculate the mode of a vector (not a valid statistic)
vector_stats(letters, "mode")
# Output: "Sorry, this function doesn't exist."

# Try to calculate the mean of a character vector (not valid)
vector_stats(letters, "mean")
# Output: "Invalid"

A6. Feb_return <- function(start, stop) {
  if (!is.numeric(start) || !is.numeric(stop) || start < 0 || stop < start) {
    return("Invalid.")
  }
  
  fib <- numeric(stop)
  fib[1] <- 0
  fib[2] <- 1
  
  for (i in 3:stop) {
    fib[i] <- fib[i-1] + fib[i-2]
  }
  
  return(fib[start:stop])
}
